service: usersinfo

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ${self:custom.myRegion}
  endpointType: regional
  logRetentionInDays: 14 # Set the default RetentionInDays for a CloudWatch LogGroup
  deploymentBucket:
    name: com.usersinfo.${self:provider.region}.artifacts # Deployment bucket name. Default is generated by the framework
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
    WARMUP_EVENT: wakeup

functions:
  app:
    handler: index.handler
    name: ${self:provider.stage}-users-info
    memorySize: 1024 # optional, in MB, default is 1024
    timeout: 3 # optional, in seconds, default is 6
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
      - schedule:
          name: '${self:provider.stage}_${self:service}_warmup_event'
          rate: rate(1 minute) #can also have cron option
          enabled: true
          input:
            wakeup: '${self:provider.environment.WARMUP_EVENT}' 

package:
  exclude:
    - public/assets/img/**
    - .git/**
    - README.md

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TableName: ${self:custom.usersTableName}
    ScalingRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - application-autoscaling.amazonaws.com
              Action:
                - "sts:AssumeRole"
        Path: "/"
        Policies:
          -
            PolicyName: "root"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "dynamodb:DescribeTable"
                    - "dynamodb:UpdateTable"
                    - "cloudwatch:PutMetricAlarm"
                    - "cloudwatch:DescribeAlarms"
                    - "cloudwatch:GetMetricStatistics"
                    - "cloudwatch:SetAlarmState"
                    - "cloudwatch:DeleteAlarms"
                  Resource: "*"

    UsersWriteCapacityScalableTarget:
      Type: "AWS::ApplicationAutoScaling::ScalableTarget"
      Properties:
        MaxCapacity: 15
        MinCapacity: 5
        ResourceId: table/${self:custom.usersTableName}
        RoleARN:
          Fn::GetAtt: [ ScalingRole, Arn ]
        ScalableDimension: dynamodb:table:WriteCapacityUnits
        ServiceNamespace: dynamodb
    UsersReadCapacityScalableTarget:
      Type: "AWS::ApplicationAutoScaling::ScalableTarget"
      Properties:
        MaxCapacity: 5000
        MinCapacity: 25
        ResourceId: table/${self:custom.usersTableName}
        RoleARN:
          Fn::GetAtt: [ ScalingRole, Arn ]
        ScalableDimension: dynamodb:table:ReadCapacityUnits
        ServiceNamespace: dynamodb
    UsersWriteScalingPolicy:
      Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
      Properties:
        PolicyName: UserssWriteAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: UsersWriteCapacityScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 50.0
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBWriteCapacityUtilization
    UsersReadScalingPolicy:
      Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
      Properties:
        PolicyName: UsersReadAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: UsersReadCapacityScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 50.0
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBReadCapacityUtilization

plugins:
  - serverless-s3bucket-sync
  - serverless-dynamodb-local
  - serverless-offline #serverless-offline needs to be last in the list

custom:
  usersTableName: '${self:provider.stage}_users'
  myRegion: ${opt:region, 'us-east-1'}
  dynamodb:
    start:
      migrate: true
  s3-sync:
    - folder: public
      bucket: '${self:provider.stage}-mybucket-assets' #reusing the dev Cloud front for assets